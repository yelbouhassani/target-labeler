{"version":3,"file":"index.mjs","sources":["../src/callback.ts","../src/createDatasetItemHandler.ts"],"sourcesContent":["import { Langfuse, type LangfuseOptions } from \"langfuse\";\n\nimport { BaseCallbackHandler } from \"@langchain/core/callbacks/base\";\nimport {\n  AIMessage,\n  AIMessageChunk,\n  BaseMessage,\n  ChatMessage,\n  FunctionMessage,\n  HumanMessage,\n  SystemMessage,\n  ToolMessage,\n  type UsageMetadata,\n  type BaseMessageFields,\n  type MessageContent,\n} from \"@langchain/core/messages\";\n\nimport type { Serialized } from \"@langchain/core/load/serializable\";\nimport type { AgentAction, AgentFinish } from \"@langchain/core/agents\";\nimport type { ChainValues } from \"@langchain/core/utils/types\";\nimport type { Generation, LLMResult } from \"@langchain/core/outputs\";\nimport type { Document } from \"@langchain/core/documents\";\n\nimport type { ChatPromptClient, LangfuseSpanClient, LangfuseTraceClient, TextPromptClient } from \"langfuse-core\";\n\nconst LANGSMITH_HIDDEN_TAG = \"langsmith:hidden\";\n\nexport type LlmMessage = {\n  role: string;\n  content: BaseMessageFields[\"content\"];\n  additional_kwargs?: BaseMessageFields[\"additional_kwargs\"];\n};\n\nexport type AnonymousLlmMessage = {\n  content: BaseMessageFields[\"content\"];\n  additional_kwargs?: BaseMessageFields[\"additional_kwargs\"];\n};\n\ntype RootParams = {\n  root: LangfuseTraceClient | LangfuseSpanClient;\n};\n\ntype KeyParams = {\n  publicKey?: string;\n  secretKey?: string;\n} & LangfuseOptions;\n\ntype ConstructorParams = (RootParams | KeyParams) & {\n  userId?: string; // added to all traces\n  version?: string; // added to all traces and observations\n  sessionId?: string; // added to all traces\n  metadata?: Record<string, unknown>; // added to all traces\n  tags?: string[]; // added to all traces\n  updateRoot?: boolean;\n};\n\nexport class CallbackHandler extends BaseCallbackHandler {\n  name = \"CallbackHandler\";\n  langfuse: Langfuse;\n  traceId?: string;\n  observationId?: string;\n  rootObservationId?: string;\n  topLevelObservationId?: string;\n  userId?: string;\n  version?: string;\n  sessionId?: string;\n  metadata?: Record<string, unknown>;\n  tags?: string[];\n  rootProvided: boolean = false;\n  updateRoot: boolean = false;\n  debugEnabled: boolean = false;\n  completionStartTimes: Record<string, Date> = {};\n  private promptToParentRunMap;\n  private traceUpdates;\n\n  constructor(params?: ConstructorParams) {\n    super();\n    if (params && \"root\" in params) {\n      this.langfuse = params.root.client as Langfuse;\n      this.rootObservationId = params.root.observationId ?? undefined;\n      this.traceId = params.root.traceId;\n      this.rootProvided = true;\n      this.updateRoot = params.updateRoot ?? false;\n      this.metadata = params.metadata;\n    } else {\n      this.langfuse = new Langfuse({\n        ...params,\n        persistence: \"memory\",\n        sdkIntegration: params?.sdkIntegration ?? \"LANGCHAIN\",\n      });\n      this.sessionId = params?.sessionId;\n      this.userId = params?.userId;\n      this.metadata = params?.metadata;\n      this.tags = params?.tags;\n    }\n    this.version = params?.version;\n    this.promptToParentRunMap = new Map<string, TextPromptClient | ChatPromptClient>();\n    this.traceUpdates = new Map<string, { userId?: string; sessionId?: string; tags?: string[] }>();\n  }\n\n  async flushAsync(): Promise<any> {\n    return this.langfuse.flushAsync();\n  }\n\n  async shutdownAsync(): Promise<any> {\n    return this.langfuse.shutdownAsync();\n  }\n\n  debug(enabled: boolean = true): void {\n    this.langfuse.debug(enabled);\n    this.debugEnabled = enabled;\n  }\n\n  _log(message: any): void {\n    if (this.debugEnabled) {\n      console.log(message);\n    }\n  }\n\n  async handleNewToken(_token: string, runId: string): Promise<void> {\n    // if this is the first token, add it to completionStartTimes\n    if (runId && !(runId in this.completionStartTimes)) {\n      this._log(`LLM first streaming token: ${runId}`);\n      this.completionStartTimes[runId] = new Date();\n    }\n    return Promise.resolve();\n  }\n\n  async handleLLMNewToken(\n    token: string,\n    _idx: any,\n    runId: string,\n    _parentRunId?: string,\n    _tags?: string[],\n    _fields?: any\n  ): Promise<void> {\n    // if this is the first token, add it to completionStartTimes\n    if (runId && !(runId in this.completionStartTimes)) {\n      this._log(`LLM first streaming token: ${runId}`);\n      this.completionStartTimes[runId] = new Date();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * @deprecated This method will be removed in a future version as it is not concurrency-safe.\n   * Please use interop with the Langfuse SDK to get the trace ID ([docs](https://langfuse.com/docs/integrations/langchain/get-started#interoperability)).\n   */\n  getTraceId(): string | undefined {\n    return this.traceId;\n  }\n\n  /**\n   * @deprecated This method will be removed in a future version as it is not concurrency-safe.\n   * For more information on how to get trace URLs, see {@link https://langfuse.com/docs/tracing/url}.\n   */\n  getTraceUrl(): string | undefined {\n    return this.traceId ? `${this.langfuse.baseUrl}/trace/${this.traceId}` : undefined;\n  }\n\n  getLangchainRunId(): string | undefined {\n    return this.topLevelObservationId;\n  }\n\n  async handleRetrieverError(err: any, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`Retriever error: ${err} with ID: ${runId}`);\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        level: \"ERROR\",\n        statusMessage: err.toString(),\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, err.toString());\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleChainStart(\n    chain: Serialized,\n    inputs: ChainValues,\n    runId: string,\n    parentRunId?: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    runType?: string,\n    name?: string\n  ): Promise<void> {\n    try {\n      this._log(`Chain start with Id: ${runId}`);\n\n      const runName = name ?? chain.id.at(-1)?.toString() ?? \"Langchain Run\";\n\n      this.registerLangfusePrompt(parentRunId, metadata);\n\n      // In chains, inputs can be a string or an array of BaseMessage\n      let finalInput: string | ChainValues = inputs;\n      if (\n        typeof inputs === \"object\" &&\n        \"input\" in inputs &&\n        Array.isArray(inputs[\"input\"]) &&\n        inputs[\"input\"].every((m) => m instanceof BaseMessage)\n      ) {\n        finalInput = inputs[\"input\"].map((m) => this.extractChatMessageContent(m));\n      } else if (typeof inputs === \"object\" && \"content\" in inputs && typeof inputs[\"content\"] === \"string\") {\n        finalInput = inputs[\"content\"];\n      }\n\n      this.generateTrace(runName, runId, parentRunId, tags, metadata, finalInput);\n      this.langfuse.span({\n        id: runId,\n        traceId: this.traceId,\n        parentObservationId: parentRunId ?? this.rootObservationId,\n        name: runName,\n        metadata: this.joinTagsAndMetaData(tags, metadata),\n        input: finalInput,\n        version: this.version,\n        level: tags && tags.includes(LANGSMITH_HIDDEN_TAG) ? \"DEBUG\" : undefined,\n      });\n\n      // If there's no parent run, this is a top-level chain execution.\n      // We store trace-level metadata (tags, userId, sessionId) for later use.\n      // This information will be used to update on handleChainEnd\n      if (!parentRunId) {\n        this.traceUpdates.set(runId, {\n          tags,\n          userId:\n            metadata && \"langfuseUserId\" in metadata && typeof metadata[\"langfuseUserId\"] === \"string\"\n              ? metadata[\"langfuseUserId\"]\n              : undefined,\n          sessionId:\n            metadata && \"langfuseSessionId\" in metadata && typeof metadata[\"langfuseSessionId\"] === \"string\"\n              ? metadata[\"langfuseSessionId\"]\n              : undefined,\n        });\n      }\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  private registerLangfusePrompt(parentRunId?: string, metadata?: Record<string, unknown>): void {\n    /*\n    Register a prompt for linking to a generation with the same parentRunId.\n\n    `parentRunId` must exist when we want to do any prompt linking to a generation. If it does not exist, it means the execution is solely a Prompt template formatting without any following LLM invocation, so no generation will be created to link to.\n    For the simplest chain, a parent run is always created to wrap the individual runs consisting of prompt template formatting and LLM invocation.\n    So, we do not need to register any prompt for linking if parentRunId is missing.\n    */\n    if (metadata && \"langfusePrompt\" in metadata && parentRunId) {\n      this.promptToParentRunMap.set(parentRunId, metadata.langfusePrompt as TextPromptClient | ChatPromptClient);\n    }\n  }\n\n  private deregisterLangfusePrompt(runId: string): void {\n    this.promptToParentRunMap.delete(runId);\n  }\n\n  async handleAgentAction(action: AgentAction, runId?: string, parentRunId?: string): Promise<void> {\n    try {\n      this._log(`Agent action with ID: ${runId}`);\n\n      this.langfuse.span({\n        id: runId,\n        parentObservationId: parentRunId,\n        traceId: this.traceId,\n        endTime: new Date(),\n        input: action,\n        version: this.version,\n      });\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleAgentEnd?(action: AgentFinish, runId: string, parentRunId?: string): Promise<void> {\n    try {\n      this._log(`Agent finish with ID: ${runId}`);\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        endTime: new Date(),\n        output: action,\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, action);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleChainError(err: any, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`Chain error: ${err} with ID: ${runId}`);\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        level: \"ERROR\",\n        statusMessage: err.toString(),\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, err.toString());\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  generateTrace(\n    runName: string,\n    runId: string,\n    parentRunId: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    input?: string | BaseMessage[][] | ChainValues\n  ): void {\n    if (this.traceId && !parentRunId && !this.rootProvided) {\n      this.traceId = undefined;\n      this.topLevelObservationId = undefined;\n    }\n\n    const params = {\n      name: runName,\n      metadata: this.joinTagsAndMetaData(tags, metadata, this.metadata),\n      userId: this.userId,\n      version: this.version,\n      sessionId: this.sessionId,\n      input: input,\n      tags: this.tags,\n    };\n\n    if (!this.traceId) {\n      this.langfuse.trace({\n        id: runId,\n        ...params,\n      });\n      this.traceId = runId;\n    }\n\n    if (this.rootProvided && this.updateRoot) {\n      if (this.rootObservationId) {\n        this.langfuse._updateSpan({ id: this.rootObservationId, traceId: this.traceId, ...params });\n      } else {\n        this.langfuse.trace({ id: this.traceId, ...params });\n      }\n    }\n\n    this.topLevelObservationId = parentRunId ? this.topLevelObservationId : runId;\n  }\n\n  async handleGenerationStart(\n    llm: Serialized,\n    messages: (LlmMessage | MessageContent | AnonymousLlmMessage)[],\n    runId: string,\n    parentRunId?: string | undefined,\n    extraParams?: Record<string, unknown> | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string\n  ): Promise<void> {\n    this._log(`Generation start with ID: ${runId}`);\n\n    const runName = name ?? llm.id.at(-1)?.toString() ?? \"Langchain Generation\";\n\n    this.generateTrace(runName, runId, parentRunId, tags, metadata, messages);\n\n    const modelParameters: Record<string, any> = {};\n    const invocationParams = extraParams?.[\"invocation_params\"];\n\n    for (const [key, value] of Object.entries({\n      temperature: (invocationParams as any)?.temperature,\n      max_tokens: (invocationParams as any)?.max_tokens,\n      top_p: (invocationParams as any)?.top_p,\n      frequency_penalty: (invocationParams as any)?.frequency_penalty,\n      presence_penalty: (invocationParams as any)?.presence_penalty,\n      request_timeout: (invocationParams as any)?.request_timeout,\n    })) {\n      if (value !== undefined && value !== null) {\n        modelParameters[key] = value;\n      }\n    }\n\n    interface InvocationParams {\n      _type?: string;\n      model?: string;\n      model_name?: string;\n      repo_id?: string;\n    }\n\n    let extractedModelName: string | undefined;\n    if (extraParams) {\n      const invocationParamsModelName = (extraParams.invocation_params as InvocationParams).model;\n      const metadataModelName =\n        metadata && \"ls_model_name\" in metadata ? (metadata[\"ls_model_name\"] as string) : undefined;\n\n      extractedModelName = invocationParamsModelName ?? metadataModelName;\n    }\n\n    const registeredPrompt = this.promptToParentRunMap.get(parentRunId ?? \"root\");\n    if (registeredPrompt && parentRunId) {\n      this.deregisterLangfusePrompt(parentRunId);\n    }\n\n    this.langfuse.generation({\n      id: runId,\n      traceId: this.traceId,\n      name: name ?? llm.id.at(-1)?.toString(),\n      metadata: this.joinTagsAndMetaData(tags, metadata),\n      parentObservationId: parentRunId ?? this.rootObservationId,\n      input: messages,\n      model: extractedModelName,\n      modelParameters: modelParameters,\n      version: this.version,\n      prompt: registeredPrompt,\n      level: tags && tags.includes(LANGSMITH_HIDDEN_TAG) ? \"DEBUG\" : undefined,\n    });\n  }\n\n  async handleChatModelStart(\n    llm: Serialized,\n    messages: BaseMessage[][],\n    runId: string,\n    parentRunId?: string | undefined,\n    extraParams?: Record<string, unknown> | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string\n  ): Promise<void> {\n    try {\n      this._log(`Chat model start with ID: ${runId}`);\n\n      const prompts = messages.flatMap((message) => message.map((m) => this.extractChatMessageContent(m)));\n\n      this.handleGenerationStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleChainEnd(outputs: ChainValues, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`Chain end with ID: ${runId}`);\n\n      let finalOutput: ChainValues | string = outputs;\n      if (typeof outputs === \"object\" && \"output\" in outputs && typeof outputs[\"output\"] === \"string\") {\n        finalOutput = outputs[\"output\"];\n      }\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        output: finalOutput,\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, finalOutput);\n      this.deregisterLangfusePrompt(runId);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleLLMStart(\n    llm: Serialized,\n    prompts: string[],\n    runId: string,\n    parentRunId?: string | undefined,\n    extraParams?: Record<string, unknown> | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string\n  ): Promise<void> {\n    try {\n      this._log(`LLM start with ID: ${runId}`);\n\n      this.handleGenerationStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleToolStart(\n    tool: Serialized,\n    input: string,\n    runId: string,\n    parentRunId?: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string\n  ): Promise<void> {\n    try {\n      this._log(`Tool start with ID: ${runId}`);\n\n      this.langfuse.span({\n        id: runId,\n        parentObservationId: parentRunId,\n        traceId: this.traceId,\n        name: name ?? tool.id.at(-1)?.toString(),\n        input: input,\n        metadata: this.joinTagsAndMetaData(tags, metadata),\n        version: this.version,\n        level: tags && tags.includes(LANGSMITH_HIDDEN_TAG) ? \"DEBUG\" : undefined,\n      });\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleRetrieverStart(\n    retriever: Serialized,\n    query: string,\n    runId: string,\n    parentRunId?: string | undefined,\n    tags?: string[] | undefined,\n    metadata?: Record<string, unknown> | undefined,\n    name?: string\n  ): Promise<void> {\n    try {\n      this._log(`Retriever start with ID: ${runId}`);\n\n      this.langfuse.span({\n        id: runId,\n        parentObservationId: parentRunId,\n        traceId: this.traceId,\n        name: name ?? retriever.id.at(-1)?.toString(),\n        input: query,\n        metadata: this.joinTagsAndMetaData(tags, metadata),\n        version: this.version,\n        level: tags && tags.includes(LANGSMITH_HIDDEN_TAG) ? \"DEBUG\" : undefined,\n      });\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleRetrieverEnd(\n    documents: Document<Record<string, any>>[],\n    runId: string,\n    parentRunId?: string | undefined\n  ): Promise<void> {\n    try {\n      this._log(`Retriever end with ID: ${runId}`);\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        output: documents,\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, documents);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleToolEnd(output: string, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`Tool end with ID: ${runId}`);\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        output: output,\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, output);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleToolError(err: any, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`Tool error ${err} with ID: ${runId}`);\n\n      this.langfuse._updateSpan({\n        id: runId,\n        traceId: this.traceId,\n        level: \"ERROR\",\n        statusMessage: err.toString(),\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, err.toString());\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  async handleLLMEnd(output: LLMResult, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`LLM end with ID: ${runId}`);\n\n      const lastResponse =\n        output.generations[output.generations.length - 1][output.generations[output.generations.length - 1].length - 1];\n      const llmUsage = this.extractUsageMetadata(lastResponse) ?? output.llmOutput?.[\"tokenUsage\"];\n      const modelName = this.extractModelNameFromMetadata(lastResponse);\n\n      const usageDetails: Record<string, any> = {\n        input: llmUsage?.input_tokens ?? (\"promptTokens\" in llmUsage ? llmUsage?.promptTokens : undefined),\n        output: llmUsage?.output_tokens ?? (\"completionTokens\" in llmUsage ? llmUsage?.completionTokens : undefined),\n        total: llmUsage?.total_tokens ?? (\"totalTokens\" in llmUsage ? llmUsage?.totalTokens : undefined),\n      };\n\n      if (llmUsage && \"input_token_details\" in llmUsage) {\n        for (const [key, val] of Object.entries(llmUsage[\"input_token_details\"] ?? {})) {\n          usageDetails[`input_${key}`] = val;\n\n          if (\"input\" in usageDetails && typeof val === \"number\") {\n            usageDetails[\"input\"] = Math.max(0, usageDetails[\"input\"] - val);\n          }\n        }\n      }\n\n      if (llmUsage && \"output_token_details\" in llmUsage) {\n        for (const [key, val] of Object.entries(llmUsage[\"output_token_details\"] ?? {})) {\n          usageDetails[`output_${key}`] = val;\n\n          if (\"output\" in usageDetails && typeof val === \"number\") {\n            usageDetails[\"output\"] = Math.max(0, usageDetails[\"output\"] - val);\n          }\n        }\n      }\n\n      const extractedOutput =\n        \"message\" in lastResponse && lastResponse[\"message\"] instanceof BaseMessage\n          ? this.extractChatMessageContent(lastResponse[\"message\"])\n          : lastResponse.text;\n\n      this.langfuse._updateGeneration({\n        id: runId,\n        model: modelName,\n        traceId: this.traceId,\n        output: extractedOutput,\n        endTime: new Date(),\n        completionStartTime: runId in this.completionStartTimes ? this.completionStartTimes[runId] : undefined,\n        usage: usageDetails,\n        usageDetails: usageDetails,\n        version: this.version,\n      });\n\n      if (runId in this.completionStartTimes) {\n        delete this.completionStartTimes[runId];\n      }\n\n      this.updateTrace(runId, parentRunId, extractedOutput);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  /** Not all models supports tokenUsage in llmOutput, can use AIMessage.usage_metadata instead */\n  private extractUsageMetadata(generation: Generation): UsageMetadata | undefined {\n    try {\n      const usageMetadata =\n        \"message\" in generation &&\n        (generation[\"message\"] instanceof AIMessage || generation[\"message\"] instanceof AIMessageChunk)\n          ? generation[\"message\"].usage_metadata\n          : undefined;\n\n      return usageMetadata;\n    } catch (err) {\n      this._log(`Error extracting usage metadata: ${err}`);\n\n      return;\n    }\n  }\n\n  private extractModelNameFromMetadata(generation: any): string | undefined {\n    try {\n      return \"message\" in generation &&\n        (generation[\"message\"] instanceof AIMessage || generation[\"message\"] instanceof AIMessageChunk)\n        ? generation[\"message\"].response_metadata.model_name\n        : undefined;\n    } catch {}\n  }\n\n  private extractChatMessageContent(message: BaseMessage): LlmMessage | AnonymousLlmMessage | MessageContent {\n    let response = undefined;\n\n    if (message instanceof HumanMessage) {\n      response = { content: message.content, role: \"user\" };\n    } else if (message instanceof ChatMessage) {\n      response = { content: message.content, role: message.role };\n    } else if (message instanceof AIMessage) {\n      response = { content: message.content, role: \"assistant\" };\n    } else if (message instanceof SystemMessage) {\n      response = { content: message.content, role: \"system\" };\n    } else if (message instanceof FunctionMessage) {\n      response = { content: message.content, additional_kwargs: message.additional_kwargs, role: message.name };\n    } else if (message instanceof ToolMessage) {\n      response = { content: message.content, additional_kwargs: message.additional_kwargs, role: message.name };\n    } else if (!message.name) {\n      response = { content: message.content };\n    } else {\n      response = {\n        role: message.name,\n        content: message.content,\n      };\n    }\n    if (message.additional_kwargs.function_call || message.additional_kwargs.tool_calls) {\n      return { ...response, additional_kwargs: message.additional_kwargs };\n    }\n    return response;\n  }\n\n  async handleLLMError(err: any, runId: string, parentRunId?: string | undefined): Promise<void> {\n    try {\n      this._log(`LLM error ${err} with ID: ${runId}`);\n\n      // Azure has the refusal status for harmful messages in the error property\n      // This would not be logged as the error message is only a generic message\n      // that there has been a refusal\n      let azureRefusalError = \"\";\n      if (typeof err == \"object\" && \"error\" in err) {\n        try {\n          azureRefusalError = \"\\n\\nError details:\\n\" + JSON.stringify(err[\"error\"], null, 2);\n        } catch {}\n      }\n\n      this.langfuse._updateGeneration({\n        id: runId,\n        traceId: this.traceId,\n        level: \"ERROR\",\n        statusMessage: err.toString() + azureRefusalError,\n        endTime: new Date(),\n        version: this.version,\n      });\n      this.updateTrace(runId, parentRunId, err.toString() + azureRefusalError);\n    } catch (e) {\n      this._log(e);\n    }\n  }\n\n  updateTrace(runId: string, parentRunId: string | undefined, output: any): void {\n    const traceUpdates = this.traceUpdates.get(runId);\n    this.traceUpdates.delete(runId);\n\n    if (!parentRunId && this.traceId && this.traceId === runId) {\n      this.langfuse.trace({ id: this.traceId, output: output, ...traceUpdates });\n    }\n\n    if (!parentRunId && this.traceId && this.rootProvided && this.updateRoot) {\n      if (this.rootObservationId) {\n        this.langfuse._updateSpan({ id: this.rootObservationId, traceId: this.traceId, output });\n      } else {\n        this.langfuse.trace({ id: this.traceId, output, ...traceUpdates });\n      }\n    }\n  }\n\n  joinTagsAndMetaData(\n    tags?: string[] | undefined,\n    metadata1?: Record<string, unknown> | undefined,\n    metadata2?: Record<string, unknown> | undefined\n  ): Record<string, unknown> | undefined {\n    const finalDict: Record<string, unknown> = {};\n    if (tags && tags.length > 0) {\n      finalDict.tags = tags;\n    }\n    if (metadata1) {\n      Object.assign(finalDict, metadata1);\n    }\n    if (metadata2) {\n      Object.assign(finalDict, metadata2);\n    }\n    return this.stripLangfuseKeysFromMetadata(finalDict);\n  }\n\n  private stripLangfuseKeysFromMetadata(metadata?: Record<string, unknown>): Record<string, unknown> | undefined {\n    if (!metadata) {\n      return;\n    }\n\n    const langfuseKeys = [\"langfusePrompt\", \"langfuseUserId\", \"langfuseSessionId\"];\n\n    return Object.fromEntries(Object.entries(metadata).filter(([key, _]) => !langfuseKeys.includes(key)));\n  }\n}\n","import type { LangfuseCore } from \"langfuse-core\";\n\nimport { CallbackHandler } from \"./callback\";\n\nimport type { DatasetItem, LangfuseTraceClient } from \"langfuse-core\";\n\ntype CreateDatasetItemHandlerParams = {\n  runName: string;\n  item: DatasetItem;\n  langfuseClient: LangfuseCore;\n  options?: {\n    runDescription?: string;\n    runMetadata?: Record<string, any>;\n  };\n};\n\nexport const createDatasetItemHandler = async (\n  params: CreateDatasetItemHandlerParams\n): Promise<{ handler: CallbackHandler; trace: LangfuseTraceClient }> => {\n  const { runName, item, langfuseClient, options } = params;\n\n  // Snake case properties to match Python SDK\n  const metadata: Record<string, string> = {\n    dataset_item_id: item.id,\n    dataset_id: item.datasetId,\n    dataset_run_name: runName,\n  };\n\n  const trace = langfuseClient.trace();\n\n  await item.link(trace, runName, {\n    description: options?.runDescription,\n    metadata: options?.runMetadata,\n  });\n\n  return {\n    handler: new CallbackHandler({ root: trace, updateRoot: true, metadata }),\n    trace,\n  };\n};\n"],"names":["LANGSMITH_HIDDEN_TAG","CallbackHandler","BaseCallbackHandler","constructor","params","name","rootProvided","updateRoot","debugEnabled","completionStartTimes","langfuse","root","client","rootObservationId","observationId","undefined","traceId","metadata","Langfuse","persistence","sdkIntegration","sessionId","userId","tags","version","promptToParentRunMap","Map","traceUpdates","flushAsync","shutdownAsync","debug","enabled","_log","message","console","log","handleNewToken","_token","runId","Date","Promise","resolve","handleLLMNewToken","token","_idx","_parentRunId","_tags","_fields","getTraceId","getTraceUrl","baseUrl","getLangchainRunId","topLevelObservationId","handleRetrieverError","err","parentRunId","_updateSpan","id","level","statusMessage","toString","endTime","updateTrace","e","handleChainStart","chain","inputs","runType","runName","at","registerLangfusePrompt","finalInput","Array","isArray","every","m","BaseMessage","map","extractChatMessageContent","generateTrace","span","parentObservationId","joinTagsAndMetaData","input","includes","set","langfusePrompt","deregisterLangfusePrompt","delete","handleAgentAction","action","handleAgentEnd","output","handleChainError","trace","handleGenerationStart","llm","messages","extraParams","modelParameters","invocationParams","key","value","Object","entries","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","request_timeout","extractedModelName","invocationParamsModelName","invocation_params","model","metadataModelName","registeredPrompt","get","generation","prompt","handleChatModelStart","prompts","flatMap","handleChainEnd","outputs","finalOutput","handleLLMStart","handleToolStart","tool","handleRetrieverStart","retriever","query","handleRetrieverEnd","documents","handleToolEnd","handleToolError","handleLLMEnd","lastResponse","generations","length","llmUsage","extractUsageMetadata","llmOutput","modelName","extractModelNameFromMetadata","usageDetails","input_tokens","promptTokens","output_tokens","completionTokens","total","total_tokens","totalTokens","val","Math","max","extractedOutput","text","_updateGeneration","completionStartTime","usage","usageMetadata","AIMessage","AIMessageChunk","usage_metadata","response_metadata","model_name","response","HumanMessage","content","role","ChatMessage","SystemMessage","FunctionMessage","additional_kwargs","ToolMessage","function_call","tool_calls","handleLLMError","azureRefusalError","JSON","stringify","metadata1","metadata2","finalDict","assign","stripLangfuseKeysFromMetadata","langfuseKeys","fromEntries","filter","_","createDatasetItemHandler","item","langfuseClient","options","dataset_item_id","dataset_id","datasetId","dataset_run_name","link","description","runDescription","runMetadata","handler"],"mappings":"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"}